	//Subject s1("高数A1", "王艳", "周三", "1-2");
	//Subject s2("高数A1", "王艳", "周五", "3-4");
	//Subject s3("高数A1", "王艳", "周一", "4-5");
	//Subject s4("英语", "顾向明", "周一", "1-3");
	//Subject s5("素质体育", "李宜珊", "周二", "6-7");
	//Subject s6("人文社科", "鲁家亮", "周一", "6-7");
	//Subject s7("形势政策", "高珺", "周四", "6-8");
	//Subject s8("思政", "黄代翠", "周二", "3-5");
	//Subject s9("军理", "陈盼盼", "周五", "9-10");
	//ofstream ofs;
	//ofs.open(FILENAME, ios::out);
	//ofs << s1 << s2 << s3 << s4 << s5 << s6 << s7 << s8 << s9;
	//ofs.close();
	//subjectArray.push_back(s1);
	//subjectArray.push_back(s2);
	//subjectArray.push_back(s3);
	//subjectArray.push_back(s4);
	//subjectArray.push_back(s5);
	//subjectArray.push_back(s6);
	//subjectArray.push_back(s7);
	//subjectArray.push_back(s8);
	//subjectArray.push_back(s9);
	//schedule_btns.push_back(s1.getButn());
	//schedule_btns.push_back(s2.getButn());
	//schedule_btns.push_back(s3.getButn());
	//schedule_btns.push_back(s4.getButn());
	//schedule_btns.push_back(s5.getButn());
	//schedule_btns.push_back(s6.getButn());
	//schedule_btns.push_back(s7.getButn());
	//schedule_btns.push_back(s8.getButn());
	//schedule_btns.push_back(s9.getButn());



		//cleardevice();
	//MyWindow::endDraw();
	//getchar();
	//graphdefaults();
	//delete m_menu;
	//delete m_schedule;
	//m_menu = new IMAGE();
	//delete m_menu;
	//cleardevice();
	//closegraph();
	//getchar();



	//#include <graphics.h>
//#include <ctime>
//#include<conio.h>
//#include<tchar.h>
//#include<winnt.h>
//#include<iostream>
//using namespace std;
//int main() {
//    initgraph(640, 480);  // 初始化图形窗口
//    setbkcolor(WHITE);    // 设置背景颜色为白色
//    cleardevice();        // 清屏
////    cout << "hello";
////    char szWord[20] = "Hello World";
////    TCHAR tszWord[1024] = { 0 };
////#ifdef UNICODE
////    MultiByteToWideChar(CP_ACP, 0, szWord, -1, tszWord, 1024);
////   strcpy(tszWord, szWord);
////#endif
//    while (1) {    // 循环直到用户按键
//        // 获取系统时间
//        system("cls");
//        time_t t = time(nullptr);
//        struct tm tm_info[50];
//        localtime_s(tm_info,&t);
//
//        // 将时间格式化为字符串
//        char cYear_Month_Date[50],cHour_Mniute_Second[50];
//        strftime(cYear_Month_Date, sizeof(cYear_Month_Date), "%Y年%m月%d日", tm_info); 
//        strftime(cHour_Mniute_Second, sizeof(cHour_Mniute_Second), "%H:%M:%S", tm_info);
//        cout << cYear_Month_Date << endl << cHour_Mniute_Second;
//        // 在窗口中显示时间字符串
//        settextcolor(BLACK);
//        settextstyle(20, 0, _T("宋体"));
//        TCHAR tcYear_Month_Date[20], tcHour_Mniute_Second[20];
//        MultiByteToWideChar(CP_ACP, 0, cYear_Month_Date, -1, tcYear_Month_Date, 20);
//        MultiByteToWideChar(CP_ACP, 0, cHour_Mniute_Second ,-1, tcHour_Mniute_Second, 20);
//        outtextxy(480, 0, tcYear_Month_Date);
//        outtextxy(480, 20, tcHour_Mniute_Second);
//
//        Sleep(1000);  // 暂停一秒钟，避免刷新太快
//        cleardevice();  // 清屏，准备显示新的时间
//    }
//
//    closegraph();  // 关闭图形窗口
//
//    return 0;
//}
////int main() {
////    initgraph(640, 480);  // 初始化图形窗口
////
////    setbkcolor(WHITE);    // 设置背景颜色为白色
////    cleardevice();        // 清屏
////
////    while (!kbhit()) {    // 循环直到用户按键
////        // 获取系统时间
////        time_t t = time(nullptr);
////        struct tm *tm_info = localtime(&t);
////
////        // 将时间格式化为字符串
////        char timeString[9];
////        strftime(timeString, sizeof(timeString), "%H:%M:%S", tm_info);
////
////        // 在窗口中显示时间字符串
////        settextcolor(BLACK);
////        settextstyle(30, 0, _T("宋体"));
////        outtextxy(250, 200, timeString);
////
////        Sleep(1000);  // 暂停一秒钟，避免刷新太快
////        cleardevice();  // 清屏，准备显示新的时间
////    }
////
////    closegraph();  // 关闭图形窗口
////
////    return 0;
////}
    //cout << hour << minute << second;
   // cout << year << " " << month << " " << day << " " << w << endl;
    // 在窗口中显示时间字符串
    //settextcolor(BLACK);
    //settextstyle(20, 0, _T("宋体"));
    //TCHAR tcYear_Month_Date[20], tcHour_Mniute_Second[20];
    //MultiByteToWideChar(CP_ACP, 0, cYear_Month_Date, -1, tcYear_Month_Date, 20);
    //MultiByteToWideChar(CP_ACP, 0, cHour_Mniute_Second ,-1, tcHour_Mniute_Second, 20);















	// crt_stat.c
// This program uses the _stat function to
// report information about the file named crt_stat.c.

#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <errno.h>

// TestFileFunction.cpp : Defines the entry point for the console application.
//

#include "stdafx.h" 
#include <stdio.h>//remove
#include <io.h>
#include <sys/stat.h>// get file info
#include <time.h>
#include <iostream>
using namespace std;

int main(int argc, char* argv[])
{
    printf("Hello World!\n");
    int iresult;
    struct _stat buf; //in stat head file
    //_FILE__ means the current file. you can assign another file name. IE D:\\test.txt"£©
    iresult = _stat(__FILE__, &buf);
    //the seconds from Greenwich 1970-1-1 to now.
    printf("seconds of file create-time  from 1970 :%d\n", buf.st_atime);
    //convert to our define format
    //struct tm *localtime(long *clock)
    long* m_sencodes = &buf.st_atime;
    struct tm* m_localTime = localtime(m_sencodes);
    printf("file Local time : %d:%d:%d\n", m_localTime->tm_hour, m_localTime->tm_min, m_localTime->tm_sec);

    //Get the current time
    long* mptr_currentSeconds = new long;
    time(mptr_currentSeconds);
    printf("current seconds from 1970 :%d\n", *mptr_currentSeconds);
    m_localTime = localtime(mptr_currentSeconds);
    printf("current Local time : %d:%d:%d\n", m_localTime->tm_hour, m_localTime->tm_min, m_localTime->tm_sec);

    //compare the two times£¬second
    //double difftime(time_t time2,time_t time1) 
    long diffSeconds = difftime(*mptr_currentSeconds, *m_sencodes);
    const int SECONDS_OF_DAY = 86400;
    //how many days?
    int diffDays = diffSeconds / SECONDS_OF_DAY;
    printf("diff time seconds: %d, days: %d\n", diffSeconds, diffDays);
    delete mptr_currentSeconds;
    //ok, now we will list all files in one folder
    struct _finddata_t c_file;
    long hFile;

    if ((hFile = _findfirst("*.*", &c_file)) == -1L)
        printf("No *.* files in current directory");
    else {
        do
        {   //we show files except sub-directory
            if (c_file.attrib != _A_SUBDIR)
            {
                printf("%s\n", c_file.name);
            }
        } while (_findnext(hFile, &c_file) == 0);
        _findclose(hFile);
    }

    cin.get();
    return 0;
}







//
//int main(void)
//{
//    struct _stat buf;
//    int result;
//    char timebuf[100];
//    char* filename = (char*)"./images/schedule.jpg";
//    errno_t err;
//
//    // Get data associated with "crt_stat.c":
//    result = _stat(filename, &buf);
//
//    // Check if statistics are valid:
//    if (result != 0)
//    {
//        perror("Problem getting information");
//        switch (errno)
//        {
//        case ENOENT:
//            printf("File %s not found.\n", filename);
//            break;
//        case EINVAL:
//            printf("Invalid parameter to _stat.\n");
//            break;
//        default:
//            /* Should never be reached. */
//            printf("Unexpected error in _stat.\n");
//        }
//    }
//    else
//    {
//        // Output some of the statistics:
//        printf("File size     : %ld\n", buf.st_size);
//        printf("Drive         : %c:\n", buf.st_dev + 'A');
//        err=strftime(timebuf, 100, "%M", (const tm*)&buf.st_ctime);
//        //err = ctime_s(timebuf, 100, &buf.st_ctime);
//        if (err)
//        {
//            printf("Invalid arguments to ctime_s.");
//            exit(1);
//        }
//        printf("Time created : %s", timebuf);
//    }
//}

	//struct tm t1 = { 0 };
	//struct tm t2 = { 0 };
	//double seconds;
	//t1.tm_year = 2019 - 1900; t1.tm_mon = 6; t1.tm_mday = 6;//现在时间2019,7,6  
	//t2.tm_year = 2020 - 1900; t2.tm_mon = 5; t2.tm_mday = 7;//明年高考时间2020,6,7  

	//seconds = difftime(mktime(&t2), mktime(&t1));//转换结构体为time_t,利用difftime,计算时间差  

	//cout << "剩余天数: " << seconds / 86400 << endl;//最后输出时间,因为一天有86400秒(60*60*24)  



		//cout << startSection << endSection << endl;
	//cout << time;
	//int size = time.size();
	//int firstColon=-1, secondColon=-1;
	//int hyphen;
	//for (int i = 0; i < size; i++)
	//{
	//	if (time[i] == ':')firstColon = i;
	//	if (firstColon != -1 && time[i] == ':')secondColon = i;
	//	if (time[i] == '-')hyphen = i;
	//}
	//stringstream ss;
	//ss << time.substr(0, firstColon);
	//ss >> startHour;
	//ss.str("");//清空buffer
	//ss.clear();//初始化流状态
	//ss << time.substr(firstColon + 1, hyphen-firstColon-1);
	//ss >> startMinute;
	//ss.str("");//清空buffer
	//ss.clear();//初始化流状态
	//ss << time.substr(hyphen + 1, secondColon - hyphen - 1);
	//ss >> endHour;
	//ss.str("");//清空buffer
	//ss.clear();//初始化流状态
	//ss << time.substr(secondColon, size - secondColon);
	//ss >> endMinute;
	//cout << startHour << " " << startMinute << " " << endHour << " " << endMinute<<endl;
	//cout << string_weekday[0] << string_weekday[1] << string_weekday[2] << string_weekday[3] << string_weekday[4]<<string_weekday[5] << endl;